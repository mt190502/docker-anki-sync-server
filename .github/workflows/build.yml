name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

permissions:
  packages: write
  contents: write

jobs:
  check_image:
    runs-on: ubuntu-latest
    outputs:
      skip_build: ${{ steps.check.outputs.skip_build }}
      anki_version: ${{ steps.get_version.outputs.anki_version }}
    steps:
      - name: Get Anki version
        id: get_version
        run: |
          anki_version=$(curl -s https://api.github.com/repos/ankitects/anki/releases/latest | jq -r .tag_name)
          echo "anki_version=${anki_version}" >> $GITHUB_OUTPUT
          echo "Determined Anki Version: ${anki_version}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image tag exists
        id: check
        run: |
          image_tag="ghcr.io/mt190502/docker-anki-sync-server:${{ steps.get_version.outputs.anki_version }}"
          echo "Checking for image: ${image_tag}"
          if docker manifest inspect "${image_tag}" &> /dev/null; then
            echo "Image tag found. Skipping build."
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "Image tag not found. Proceeding with build."
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check_image
    if: ${{ needs.check_image.outputs.skip_build == 'false' }}
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    runs-on: ${{ contains(matrix.platform, 'arm64') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    steps:
      - name: Prepare Environment Variables
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout anki repository
        uses: actions/checkout@v4
        with:
          repository: ankitects/anki
          ref: main
          path: anki

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          build-args: |
            ANKI_VERSION=${{ needs.check_image.outputs.anki_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ./anki/docs/syncserver
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          platforms: ${{ matrix.platform }}
          tags: ghcr.io/mt190502/docker-anki-sync-server

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest artifact
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    needs:
      - check_image
      - build
    if: ${{ needs.check_image.outputs.skip_build == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download all digest artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/mt190502/docker-anki-sync-server
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          tag="ghcr.io/mt190502/docker-anki-sync-server:${{ needs.check_image.outputs.anki_version }}"
          docker buildx imagetools create -t "${tag}" \
            $(printf 'ghcr.io/mt190502/docker-anki-sync-server@sha256:%s ' *)
